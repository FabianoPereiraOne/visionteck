generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ClassType {
  EBOOK
  VIDEO
}

enum Bullet {
  BUGS
  SECURITY
  OPTIMIZATIONS
  UPDATES
  FEATURES
  COMPATIBILITY
  INTEGRATIONS
}

model Plan {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  users       User[]
  trains      Train[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("plans")
}

model User {
  id                String         @id @default(uuid())
  name              String
  email             String         @unique
  password          String
  profession        String
  phone             String
  status            Boolean        @default(true)
  emailVerified     Boolean        @default(false)
  verificationToken String
  type              Role           @default(USER)
  trains            Train[]        @relation("usersOnTrain")
  planId            Int
  plan              Plan           @relation(fields: [planId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  progress          Progress[]
  consultations     Consultation[]

  @@map("users")
}

model Collection {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  themeColor  String
  trains      Train[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("collections")
}

model Train {
  id           String      @id @default(uuid())
  title        String
  description  String
  linkCover    String
  users        User[]      @relation("usersOnTrain")
  modules      Module[]
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: SetNull)
  collectionId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  plan         Plan?       @relation(fields: [planId], references: [id], onDelete: SetNull)
  planId       Int?

  @@map("trains")
}

model Module {
  id          String    @id @default(uuid())
  title       String
  description String
  lock        Boolean?  @default(false)
  open        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  train       Train?    @relation(fields: [trainId], references: [id], onDelete: SetNull)
  trainId     String?
  classes     Class[]

  @@map("modules")
}

model Class {
  id          String     @id @default(uuid())
  title       String
  description String
  linkClass   String
  type        ClassType  @default(VIDEO)
  module      Module?    @relation(fields: [moduleId], references: [id], onDelete: SetNull)
  moduleId    String?
  progress    Progress[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("classes")
}

model Progress {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String
  rating      Int?
  completed   Boolean
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("progress")
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  bullet      Bullet   @default(FEATURES)
  bulletColor String   @default("#086B0B")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notes")
}

model Ad {
  id          String   @id @default(uuid())
  title       String
  description String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ads")
}

model Consultation {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  dateMeet    DateTime
  status      Status
  meetingLink String
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("consultations")
}

model AvailableTime {
  id        Int      @id @default(autoincrement())
  dateMeet  DateTime
  startTime String
  endTime   String
  lock      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("availablesTimes")
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
